openapi: 3.0.3
info:
  title: Users Service API Documentation - v1
  description: |-
    
    This is a Users Service API Documentation based on the OpenAPI 3.0 specification. 
    
    To be finished with neccesary backend.
    
    Some useful links:
    - [Users Service repository](https://github.com/kacper-pasterz/user_fastapi_app.git)
    
  contact:
    email: kacper.pasterz.97@gmail.com
  version: 1.0.
servers:
  - url: https://myusersservice.swagger.io/API/v1
  
tags:
  - name: users
    description: Users Service API
    
paths:
  /users:
    post:
      tags:
        - users
      summary: Add new user
      description: Add new user
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSave'
        required: true
      responses:
        '201':
          description: Successful operation. New user created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid input
        '500':
          description: Internal Server Error
          
  /users/{userId}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Return an user with given ID
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: "User's ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation. User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Internal Server Error
    put:
      tags:
        - users
      summary: Update user's data
      description: Update user's data
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of a user whose data needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSave'
        required: true
      responses:
        '200':
          description: Successful operation. User's data updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - users
      summary: Delete a user
      description: Delete a user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of an user who is to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation. User deleted
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /users/searchUser:
    get:
      tags:
        - users
      summary: Search user
      description: Multiple searching parameters avalaible. Give a user's ID, nickname or email adress.
      operationId: searchUser
      parameters:
        - name: userId
          in: query
          description: Use user's Id as a searching parameter
          required: false
          schema:
            type: integer
            format: int64
        - name: nickname
          in: query
          description: Use user's nickname as a searching parameter
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Use user's email adress as a searching parameter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. User found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
        '204':
          description: No content found
        '400':
          description: Invalid input
        '500':
          description: Internal Server Error
          
  /users/searchUserX:
      parameters:
          - in: query
            name: filter
            required: true
            style: form
            explode: true
            schema:
              type: object
              properties:
                userId:
                  type: integer
                nickname:
                  type: string
                email:
                  type: string
              minProperties: 1
              maxProperties: 1
              additionalProperties: false
      responses:
          '200':
            description: Successful operation. User found
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'          
          '204':
            description: No content found
          '400':
            description: Invalid input
          '500':
            description: Internal Server Error
            
components:
  schemas:
    UserSave:
      required:
        - username
        - firstName
        - lastName
        - email
      type: object
      properties:
        country:
          type: string
          example: Poland
        dateOfBirth:
          type: integer
          example: 01.01.1990
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        gender:
          type: string
          example: man
        nickname:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
    User:
      type: object
      properties:
        country:
          type: string
          example: Poland
        dateOfBirth:
          type: integer
          example: 01.01.1990
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Smith
        gender:
          type: string
          example: man
        nickname:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        userId:
          type: integer
          format: int64
          example: 10